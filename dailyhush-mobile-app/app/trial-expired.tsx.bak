/**
 * DailyHush - Trial Expired Screen
 * Shown when user's 7-day Premium trial expires
 * Offers subscription options or Free tier continuation
 * Created: 2025-10-31
 */

import { useState, useEffect } from 'react';
import { useRouter, Stack } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import { Alert } from 'react-native';
import * as Haptics from 'expo-haptics';

import { TrialExpiredPaywall } from '@/components/TrialExpiredPaywall';
import { supabase } from '@/utils/supabase';
import { restorePurchases, PREMIUM_ENTITLEMENT_ID } from '@/utils/revenueCat';
import type { LoopType } from '@/data/quizQuestions';

export default function TrialExpiredScreen() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [loopType, setLoopType] = useState<LoopType | null>(null);

  // Load loop type from user profile
  useEffect(() => {
    const loadLoopType = async () => {
      try {
        const {
          data: { session },
        } = await supabase.auth.getSession();

        if (!session?.user) {
          console.error('No authenticated user');
          return;
        }

        const { data: profile } = await supabase
          .from('user_profiles')
          .select('loop_type')
          .eq('user_id', session.user.id)
          .single();

        if (profile?.loop_type) {
          setLoopType(profile.loop_type as LoopType);
        }
      } catch (error) {
        console.error('Error loading loop type:', error);
      }
    };

    loadLoopType();
  }, []);

  // Handle subscription (navigate to subscription picker)
  const handleSubscribe = async () => {
    try {
      setIsLoading(true);
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);

      // Navigate to subscription screen
      // TODO: Create subscription screen with RevenueCat integration
      router.push('/subscription');
    } catch (error) {
      console.error('Error navigating to subscription:', error);
      setIsLoading(false);
    }
  };

  // Handle continue with Free tier
  const handleContinueFree = async () => {
    try {
      setIsLoading(true);
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);

      // User chooses to stay on Free tier
      // Trial is already expired (premium_trial_active = false)
      // Just navigate back to home

      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      router.replace('/');
    } catch (error) {
      console.error('Error continuing with Free:', error);
      setIsLoading(false);
    }
  };

  /**
   * Handle Restore Purchases
   * Calls RevenueCat to restore previous purchases
   */
  const handleRestore = async () => {
    try {
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);

      console.log('ðŸ”„ Restoring purchases...');
      const customerInfo = await restorePurchases();

      // Check if user now has Premium entitlement
      const hasPremium = customerInfo.entitlements.active[PREMIUM_ENTITLEMENT_ID];

      if (hasPremium) {
        // Success - Premium access restored
        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);

        Alert.alert(
          'âœ… Purchases Restored',
          'Your Premium access has been restored. Welcome back!',
          [
            {
              text: 'Continue',
              onPress: () => router.replace('/'),
            },
          ]
        );
      } else {
        // No active subscription found
        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);

        Alert.alert(
          'No Purchases Found',
          'We could not find any active subscriptions linked to your account. If you believe this is an error, please contact support at hello@daily-hush.com.',
          [{ text: 'OK' }]
        );
      }
    } catch (error: any) {
      console.error('Restore error:', error);
      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);

      Alert.alert(
        'Restore Failed',
        error.message || 'Unable to restore purchases. Please try again or contact support.',
        [{ text: 'OK' }]
      );
    } finally {
      setIsRestoring(false);
    }
  };

  return (
    <>
      <Stack.Screen
        options={{
          headerShown: false,
          presentation: 'modal',
        }}
      />
      <StatusBar style="light" />
      <TrialExpiredPaywall
        loopType={loopType}
        onSubscribe={handleSubscribe}
        onContinueFree={handleContinueFree}
        onRestorePurchases={handleRestore}
        isLoading={isLoading}
        showClose={false}
      />
    </>
  );
}
